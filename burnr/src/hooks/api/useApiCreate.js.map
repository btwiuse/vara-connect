{"version":3,"file":"useApiCreate.js","sourceRoot":"","sources":["../../../../src/hooks/api/useApiCreate.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAA;AAC3C,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAA;AAC1C,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAA;AACvC,OAAO,EAAE,UAAU,EAAE,MAAM,wBAAwB,CAAA;AACnD,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,MAAM,uBAAuB,CAAA;AAC7D,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAA;AAEnD,MAAM,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC,CAAA;AAE9B,MAAM,CAAC,MAAM,YAAY,GAAG,GAAe,EAAE;IAC3C,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,QAAQ,CAAa,EAAgB,CAAC,CAAA;IAE5D,MAAM,CAAC,OAAO,CAAC,GAAG,QAAQ,CAAS,OAAO,CAAC,EAAE,CAAC,CAAA;IAC9C,MAAM,UAAU,GAAG,eAAe,EAAE,CAAA;IAEpC,SAAS,CAAC,GAAS,EAAE;QACnB,MAAM,YAAY,GAAG,CAAO,QAAgB,EAAiB,EAAE;YAC7D,IAAI;gBACF,MAAM,QAAQ,GAAG,IAAI,UAAU,CAAC,QAAQ,CAAC,CAAA;gBACzC,MAAM,QAAQ,CAAC,OAAO,EAAE,CAAA;gBACxB,MAAM,GAAG,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAA;gBACjD,CAAC,CAAC,GAAG,CAAC,6BAA6B,QAAQ,EAAE,CAAC,CAAA;gBAC9C,UAAU,CAAC,OAAO,IAAI,MAAM,CAAC,GAAG,CAAC,CAAA;aAClC;YAAC,OAAO,GAAG,EAAE;gBACZ,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAA;aACvB;QACH,CAAC,CAAA,CAAA;QAED,KAAK,YAAY,CAAC,OAAO,CAAC,CAAA;IAC5B,CAAC,EAAE,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC,CAAA;IAEzB,OAAO,GAAG,CAAA;AACZ,CAAC,CAAA","sourcesContent":["import { useEffect, useState } from \"react\"\nimport { ApiPromise } from \"@polkadot/api\"\nimport { logger } from \"@polkadot/util\"\nimport { ScProvider } from \"@polkadot/rpc-provider\"\nimport { NETWORK, BURNR_WALLET } from \"../../utils/constants\"\nimport { useIsMountedRef } from \"./useIsMountedRef\"\n\nconst l = logger(BURNR_WALLET)\n\nexport const useApiCreate = (): ApiPromise => {\n  const [api, setApi] = useState<ApiPromise>({} as ApiPromise)\n\n  const [network] = useState<string>(NETWORK.id)\n  const mountedRef = useIsMountedRef()\n\n  useEffect((): void => {\n    const choseSmoldot = async (endpoint: string): Promise<void> => {\n      try {\n        const provider = new ScProvider(endpoint)\n        await provider.connect()\n        const api = await ApiPromise.create({ provider })\n        l.log(`Burnr is now connected to ${endpoint}`)\n        mountedRef.current && setApi(api)\n      } catch (err) {\n        l.error(\"Error:\", err)\n      }\n    }\n\n    void choseSmoldot(network)\n  }, [mountedRef, network])\n\n  return api\n}\n"]}
