{"version":3,"file":"useBalance.js","sourceRoot":"","sources":["../../../src/hooks/useBalance.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,OAAO,CAAA;AACtB,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAA;AAC3C,OAAO,EAAE,aAAa,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAA;AAGtD,OAAO,EAAE,YAAY,EAAE,MAAM,oBAAoB,CAAA;AACjD,OAAO,EAAE,MAAM,EAAE,MAAM,cAAc,CAAA;AACrC,OAAO,EAAE,eAAe,EAAE,MAAM,uBAAuB,CAAA;AAIvD,MAAM,IAAI,GAAG,IAAI,EAAE,CAAC,CAAC,CAAC,CAAA;AAEtB,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,OAAe,EAAS,EAAE;IACnD,MAAM,GAAG,GAAG,MAAM,EAAE,CAAA;IACpB,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAQ;QACxC,GAAG;QACH,IAAI,EAAE,CAAC,IAAI,CAAY;QACvB,IAAI;QACJ,GAAG;KACJ,CAAC,CAAA;IACF,MAAM,UAAU,GAAG,eAAe,EAAE,CAAA;IACpC,SAAS,CAAC,GAAiB,EAAE;QAC3B,MAAM,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC,CAAA;QAC9B,IAAI,WAAW,GAAwB,IAAI,CAAA;QAC3C,OAAO;YACL,GAAG,CAAC,KAAK,CAAC,MAAM;iBACb,OAAO,CAAC,OAAO,EAAE,CAAC,EAAE,IAAI,EAAe,EAAQ,EAAE;gBAChD,UAAU,CAAC,OAAO;oBAChB,QAAQ,CAAC;wBACP,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE;4BACvB,QAAQ,EAAE,GAAG,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC;4BACvC,SAAS,EAAE,GAAG;4BACd,MAAM,EAAE,KAAK;yBACd,CAAC;wBACF,IAAI,CAAC,IAAI;wBACT,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;wBAClB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;qBAClC,CAAC,CAAA;YACN,CAAC,CAAC;iBACD,IAAI,CAAC,CAAC,CAAC,EAAQ,EAAE;gBAChB,WAAW,GAAG,CAAC,CAAA;YACjB,CAAC,CAAC;iBACD,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAA;QAEnB,OAAO,GAAS,EAAE;YAChB,WAAW,IAAI,WAAW,EAAE,CAAA;QAC9B,CAAC,CAAA;IACH,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE,UAAU,CAAC,CAAC,CAAA;IAE9B,OAAO,KAAK,CAAA;AACd,CAAC,CAAA","sourcesContent":["import BN from \"bn.js\"\nimport { useEffect, useState } from \"react\"\nimport { formatBalance, logger } from \"@polkadot/util\"\nimport { Balance, AccountInfo } from \"@polkadot/types/interfaces\"\n\nimport { BURNR_WALLET } from \"../utils/constants\"\nimport { useApi } from \"./api/useApi\"\nimport { useIsMountedRef } from \"./api/useIsMountedRef\"\n\ntype State = [string, Balance, boolean, string]\n\nconst ZERO = new BN(0)\n\nexport const useBalance = (address: string): State => {\n  const api = useApi()\n  const [state, setState] = useState<State>([\n    \"0\",\n    new BN(ZERO) as Balance,\n    true,\n    \"-\",\n  ])\n  const mountedRef = useIsMountedRef()\n  useEffect((): (() => void) => {\n    const l = logger(BURNR_WALLET)\n    let unsubscribe: null | (() => void) = null\n    address &&\n      api.query.system\n        .account(address, ({ data }: AccountInfo): void => {\n          mountedRef.current &&\n            setState([\n              formatBalance(data.free, {\n                decimals: api.registry.chainDecimals[0],\n                forceUnit: \"-\",\n                withSi: false,\n              }),\n              data.free,\n              data.free.isZero(),\n              data.free.registry.chainTokens[0],\n            ])\n        })\n        .then((u): void => {\n          unsubscribe = u\n        })\n        .catch(l.error)\n\n    return (): void => {\n      unsubscribe && unsubscribe()\n    }\n  }, [address, api, mountedRef])\n\n  return state\n}\n"]}