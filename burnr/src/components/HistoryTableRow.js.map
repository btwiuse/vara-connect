{"version":3,"file":"HistoryTableRow.js","sourceRoot":"","sources":["../../../src/components/HistoryTableRow.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAqB,UAAU,EAAE,MAAM,OAAO,CAAA;AAErD,OAAO,EAAE,MAAM,OAAO,CAAA;AACtB,OAAO,EAAE,qBAAqB,EAAE,MAAM,mBAAmB,CAAA;AAEzD,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAA;AAGvD,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,gBAAgB,EAAE,MAAM,GAAG,CAAA;AAe/D,MAAM,eAAe,GAA6B,CAAC,EACjD,OAAO,EACP,GAAG,EACH,IAAI,GAAG,MAAM,EACb,UAAU,GAAG,IAAI,GAClB,EAAE,EAAE;IACH,MAAM,EAAE,iBAAiB,EAAE,GAAG,UAAU,CAAC,qBAAqB,CAAC,CAAA;IAC/D,OAAO,CACL,KAAC,QAAQ,kBAAC,KAAK,sBACZ,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;YACtB,MAAM,KAAK,GAAoB,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;YAC7C,OAAO,CACL,MAAC,SAAS,kBAAkC,KAAK,EAAE,MAAM,CAAC,KAAK,iBAC5D,MAAM,CAAC,EAAE,KAAK,UAAU,IAAI,CAC3B,KAAC,WAAW,IAAC,OAAO,EAAE,EAAE,OAAO,EAAE,KAAK,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,GAAI,CAClE,EACA,MAAM,CAAC,EAAE,KAAK,WAAW,IAAI,KAAK,EAClC,MAAM,CAAC,EAAE,KAAK,OAAO,IAAI,6EAA6E;wBACrG,CAAC,OAAO,KAAK,KAAK,QAAQ,IAAI,OAAO,KAAK,KAAK,QAAQ,CAAC,IAAI,CAC1D,KAAC,YAAY,IACX,SAAS,EAAE,iBAAiB,EAC5B,KAAK,EAAE,IAAI,EAAE,CAAC,KAAK,CAAY,EAC/B,IAAI,EAAE,IAAI,GACV,CACH,EACF,UAAU,IAAI,MAAM,CAAC,EAAE,KAAK,QAAQ,IAAI,CACvC,KAAC,gBAAgB,IAAC,MAAM,EAAE,GAAG,CAAC,MAAM,GAAI,CACzC,MAfa,eAAe,MAAM,CAAC,EAAE,EAAE,CAgB9B,CACb,CAAA;QACH,CAAC,CAAC,KAtBiB,aAAa,CAuBvB,CACZ,CAAA;AACH,CAAC,CAAA;AAED,eAAe,eAAe,CAAA","sourcesContent":["import { FunctionComponent, useContext } from \"react\"\n\nimport BN from \"bn.js\"\nimport { BalanceVisibleContext } from \"../utils/contexts\"\nimport { Balance } from \"@polkadot/types/interfaces\"\nimport { TableRow, TableCell } from \"@material-ui/core\"\nimport { Column } from \"../utils/types\"\n\nimport { AccountCard, BalanceValue, PopoverExtrinsic } from \".\"\n\ninterface rowContent {\n  withWhom: string\n  extrinsic: string\n  value: string | number\n  status: string | number\n}\ninterface Props {\n  row: rowContent\n  columns: Column[]\n  unit?: string\n  showStatus?: boolean\n}\n\nconst HistoryTableRow: FunctionComponent<Props> = ({\n  columns,\n  row,\n  unit = \"Unit\",\n  showStatus = true,\n}) => {\n  const { balanceVisibility } = useContext(BalanceVisibleContext)\n  return (\n    <TableRow hover key={`transaction`}>\n      {columns.map((column) => {\n        const value: string | number = row[column.id]\n        return (\n          <TableCell key={`transaction-${column.id}`} align={column.align}>\n            {column.id === \"withWhom\" && (\n              <AccountCard account={{ address: value.toString(), name: \"\" }} />\n            )}\n            {column.id === \"extrinsic\" && value}\n            {column.id === \"value\" && // This may look overwhelming but is just for \"dump\" data until page is fixed\n              (typeof value === \"number\" || typeof value === \"string\") && (\n                <BalanceValue\n                  isVisible={balanceVisibility}\n                  value={new BN(value) as Balance}\n                  unit={unit}\n                />\n              )}\n            {showStatus && column.id === \"status\" && (\n              <PopoverExtrinsic status={row.status} />\n            )}\n          </TableCell>\n        )\n      })}\n    </TableRow>\n  )\n}\n\nexport default HistoryTableRow\n"]}