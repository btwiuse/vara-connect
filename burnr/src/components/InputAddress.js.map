{"version":3,"file":"InputAddress.js","sourceRoot":"","sources":["../../../src/components/InputAddress.tsx"],"names":[],"mappings":";AAAA,OAAO,EAGL,SAAS,EACT,QAAQ,EAGR,IAAI,GACL,MAAM,OAAO,CAAA;AAEd,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,GAAG,EAAE,MAAM,mBAAmB,CAAA;AAC/D,OAAO,QAAQ,MAAM,2BAA2B,CAAA;AAEhD,OAAO,SAAS,MAAM,2BAA2B,CAAA;AAMjD,MAAM,YAAY,GAA6B,CAAC,EAAE,UAAU,EAAE,EAAE,EAAE;IAChE,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAS,EAAE,CAAC,CAAA;IAE9C,SAAS,CAAC,GAAS,EAAE;QACnB,UAAU,CAAC,KAAK,CAAC,CAAA;IACnB,CAAC,EAAE,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC,CAAA;IAEvB,MAAM,kBAAkB,GAAG,CAAC,CAAc,EAAE,EAAE;QAC5C,MAAM,GAAG,GAAI,CAAC,CAAC,aAAqC,CAAC,KAAK,CAAA;QAC1D,QAAQ,CAAC,GAAG,CAAC,CAAA;IACf,CAAC,CAAA;IAED,OAAO,CACL,4BACE,KAAC,GAAG,kBAAC,OAAO,EAAE,CAAC,gBACb,KAAC,WAAW,kBAAC,QAAQ,QAAC,SAAS,sBAC7B,KAAC,SAAS,IACR,KAAK,EAAC,UAAU,EAChB,QAAQ,EAAE,kBAAkB,EAC5B,OAAO,EAAE,kBAAkB,EAC3B,MAAM,EAAE,kBAAkB,EAC1B,KAAK,EAAE,KAAK,EACZ,WAAW,EAAC,iBAAiB,EAC7B,OAAO,EAAC,UAAU,EAClB,SAAS,QACT,UAAU,EAAE;wBACV,UAAU,EAAE,OAAO;wBACnB,cAAc,EAAE,CACd,KAAC,GAAG,kBAAC,WAAW,EAAE,CAAC,gBAChB,CAAC,KAAK,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC,CAAC,CACxB,KAAC,QAAQ,IAAC,OAAO,EAAC,QAAQ,EAAC,KAAK,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,GAAI,CACrD,CAAC,CAAC,CAAC,CACF,KAAC,SAAS,IAAC,IAAI,EAAE,EAAE,EAAE,KAAK,EAAC,UAAU,EAAC,KAAK,EAAE,KAAK,GAAI,CACvD,IACG,CACP;qBACF,GACD,IACU,IACV,GACL,CACJ,CAAA;AACH,CAAC,CAAA;AAED,eAAe,IAAI,CAAC,YAAY,CAAC,CAAA","sourcesContent":["import {\n  FunctionComponent,\n  ChangeEvent,\n  useEffect,\n  useState,\n  SetStateAction,\n  Dispatch,\n  memo,\n} from \"react\"\n\nimport { FormControl, TextField, Box } from \"@material-ui/core\"\nimport Skeleton from \"@material-ui/lab/Skeleton\"\n\nimport Identicon from \"@polkadot/react-identicon\"\n\ninterface Props {\n  setAddress: Dispatch<SetStateAction<string>>\n}\n\nconst InputAddress: FunctionComponent<Props> = ({ setAddress }) => {\n  const [value, setValue] = useState<string>(\"\")\n\n  useEffect((): void => {\n    setAddress(value)\n  }, [value, setAddress])\n\n  const handleChangeButton = (e: ChangeEvent) => {\n    const val = (e.currentTarget as HTMLTextAreaElement).value\n    setValue(val)\n  }\n\n  return (\n    <>\n      <Box marginY={1}>\n        <FormControl required fullWidth>\n          <TextField\n            label=\"Receiver\"\n            onChange={handleChangeButton}\n            onFocus={handleChangeButton}\n            onBlur={handleChangeButton}\n            value={value}\n            placeholder=\"Westend Address\"\n            variant=\"outlined\"\n            fullWidth\n            InputProps={{\n              spellCheck: \"false\",\n              startAdornment: (\n                <Box marginRight={1}>\n                  {!value || value === \"\" ? (\n                    <Skeleton variant=\"circle\" width={32} height={32} />\n                  ) : (\n                    <Identicon size={32} theme=\"polkadot\" value={value} />\n                  )}\n                </Box>\n              ),\n            }}\n          />\n        </FormControl>\n      </Box>\n    </>\n  )\n}\n\nexport default memo(InputAddress)\n"]}